import React, { useState, useEffect } from "react";
import { database } from "../firebase";
import { ref, onValue, push, set, remove } from "firebase/database";
import { useParams, useNavigate } from "react-router-dom";
import { GameList } from "../components/Game/GameItem/GameItemList";
import { GameSelection } from "../components/Game/GameSelection";
import { ROUTE_PATHS } from "../helpers/routes";

interface Player {
  id: string;
  name: string;
  isPlaying?:any;
}

// Generated by https://quicktype.io

interface Teams {
  FirstTeam: TeamElement[];
  SecondTeam: TeamElement[];
}

interface TeamElement {
  id: string;
  name: string;
}

export interface Game {
  date: string;
  ended: boolean;
  id: string;
  idTeamLooser: string;
  idTeamWinner: string;
  teams?: Teams;
}

const StartGame: React.FC = () => {
  const { leagueId } = useParams<{ leagueId: string }>();
  const navigate = useNavigate();
  const [players, setPlayers] = useState<Player[]>([]);
  const [selectedPlayers, setSelectedPlayers] = useState<Player[]>([]);
  const [ongoingGames, setOngoingGames] = useState<Game[]>([]);
  const [finishedGames, setFinishedGames] = useState<Game[]>([]);

  useEffect(() => {
    if (!leagueId) return;

    const playersRef = ref(database, `ligas/${leagueId}/jugadores`);
    const gamesRef = ref(database, `ligas/${leagueId}/partidas`);

    const unsubscribePlayers = onValue(playersRef, (snapshot) => {
      const data = snapshot.val() ?? {};
      var players = Object.keys(data).map((key) => ({ id: key, ...data[key] }));
      setPlayers(players.filter(p => !p.isPlaying));
    });

    const unsubscribeGames = onValue(gamesRef, (snapshot) => {
      const data = snapshot.val() ?? {};
      const games = Object.keys(data).map((key) => ({ id: key, ...data[key] }));
      
      setOngoingGames(games.filter((game) => !game.ended));
      setFinishedGames(games.filter((game) => game.ended));
    });

    return () => {
      unsubscribePlayers();
      unsubscribeGames();
    };
  }, [leagueId]);

  const togglePlayerSelection = (player: Player) => {
   
    console.log(player);
    
    
    setSelectedPlayers((prev) =>
      prev.some((p) => p.id === player.id && !p.isPlaying)
        ? prev.filter((p) => p.id !== player.id && !p.isPlaying )
        : prev.length < 4
        ? [...prev, player]
        : prev.filter(x => !x.isPlaying)
    );

    console.log(selectedPlayers);
  };

  const enterGame = (game: Game) => {
    console.log(game);

    navigate(ROUTE_PATHS.SCORE_POINTS.replace(":leagueId", leagueId!), {
      state: {
        jugadores: game.teams?.FirstTeam.concat(game.teams?.SecondTeam),
        partidaId: game.id,
      },
    });
  };

  const deleteGame = (gameId: string) => {
    remove(ref(database, `ligas/${leagueId}/partidas/${gameId}`))
      .then(() => console.log("Partida eliminada con éxito"))
      .catch((error) => console.error("Error al eliminar la partida:", error));
  };

  const startNewGame = () => {
    let partidaId = "";

    //Save Partida //
    let date = new Date().toLocaleDateString();
    const partidaInicial: Game = {
      date: date,
      idTeamWinner: "",
      idTeamLooser: "",
      ended: false,
      id:""
    } as Game;

    const partidaRef = push(ref(database, `ligas/${leagueId}/partidas`));
    partidaInicial.id = partidaRef.key!;
    set(partidaRef, partidaInicial)
      .then(() => {
        savePlayers(partidaRef.key!);
      })
      .catch((error) => {
        console.error("Error al iniciar la partida:", error);
      });
  };

  const savePlayers = async (partidaId: string) => {
    var firstTeam = selectedPlayers.slice(0, 2);
    var secondTeam = selectedPlayers.slice(2);
    const ref = database.ref(`ligas/${leagueId}/partidas/${partidaId}/teams`);

    await ref.set({
      FirstTeam: firstTeam.map(({ id, name }) => ({ id, name })),
      SecondTeam: secondTeam.map(({ id, name }) => ({ id, name })),
    });
    enterGame({
      id: partidaId,
      teams: { FirstTeam: firstTeam, SecondTeam: secondTeam },
    } as Game);

    updatePlayersPlaying();
  };
   
  const updatePlayersPlaying = () => {
    selectedPlayers.forEach(player => {
      const ref = database.ref(`ligas/${leagueId}/jugadores/${player.id}`);
      ref.update({
        isPlaying: true 
      })
      .then(() => {
        console.log('User data updated successfully!');
      })
      .catch((error) => {
        console.error('Error updating user data: ', error);
      });
    });
    
  }


  return (
    <div>
      <h2>Iniciar Partida</h2>
      <GameSelection
        players={players}
        selectedPlayers={selectedPlayers}
        onPlayerSelect={togglePlayerSelection}
        onStartGame={startNewGame}
      />
      <h4 className="mt-4">Partidas en Curso</h4>
      <GameList
        games={ongoingGames}
        onJoinGame={enterGame}
        onDeleteGame={deleteGame}
      />
      <h4 className="mt-4">Partidas del Día</h4>
      <GameList
        games={finishedGames}
        onJoinGame={enterGame}
      />
    </div>
  );
};

export default StartGame;
